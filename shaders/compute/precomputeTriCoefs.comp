#version 460 core
/// #include "default/_shaderBase.glsl"

layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

void main()
{
    uint index = gl_GlobalInvocationID.x;
    if (index >= triangles.length()) return;
    Triangle tri = triangles[index];

    vec3 p0 = localToGlobal(tri.vertices[0].posU.xyz, objects[int(tri.materialIndex.y)]);
    vec3 p1 = localToGlobal(tri.vertices[1].posU.xyz, objects[int(tri.materialIndex.y)]);
    vec3 p2 = localToGlobal(tri.vertices[2].posU.xyz, objects[int(tri.materialIndex.y)]);

    vec3 e1 = p1 - p0;
    vec3 e2 = p2 - p0;
    vec3 normal = cross(p1 - p0, p2 - p1);

    if (abs(normal.x) > abs(normal.y) && abs(normal.x) > abs(normal.z))
    {
        tri.rows[0] = vec4(0.0f, e2.z / normal.x, -e2.y / normal.x, cross(p2, p0).x / normal.x);
        tri.rows[1] = vec4(0.0f, -e1.z / normal.x, e1.y / normal.x, -cross(p1, p0).x / normal.x);
        tri.rows[2] = vec4(1.0f, normal.y / normal.x, normal.z / normal.x, -dot(p0, normal) / normal.x);
    }
    else if (abs(normal.y) > abs(normal.z))
    {
        tri.rows[0] = vec4(-e2.z / normal.y, 0.0f, e2.x / normal.y, cross(p2, p0).y / normal.y);
        tri.rows[1] = vec4(e1.z / normal.y, 0.0f, -e1.x / normal.y, -cross(p1, p0).y / normal.y);
        tri.rows[2] = vec4(normal.x / normal.y, 1.0f, normal.z / normal.y, -dot(p0, normal) / normal.y);
    }
    else if (abs(normal.z) > 0.0f)
    {
        tri.rows[0] = vec4(e2.y / normal.z, -e2.x / normal.z, 0.0f, cross(p2, p0).z / normal.z);
        tri.rows[1] = vec4(-e1.y / normal.z, e1.x / normal.z, 0.0f, -cross(p1, p0).z / normal.z);
        tri.rows[2] = vec4(normal.x / normal.z, normal.y / normal.z, 1.0f, -dot(p0, normal) / normal.z);
    }
    else
    {
        tri.rows[0] = vec4(0);
        tri.rows[1] = vec4(0);
        tri.rows[2] = vec4(0);
    }
    triangles[index] = tri;
}
