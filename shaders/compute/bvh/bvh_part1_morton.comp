#version 460 core
#extension GL_ARB_shading_language_include : enable
#include "common.glsl"

layout(local_size_x = 32) in;

const float GRID_RESOLUTION = 1023;

layout(std140, binding = 6) /*buffer*/ uniform TriangleCenters
{
    vec3 centers[];
};

layout(std140, binding = 7) /*buffer*/ uniform MinMax
{
    ivec3 globalMinInt;
    ivec3 globalMaxInt;
};

layout(std430, binding = 8) /*buffer*/ uniform MortonCodes
{
    uint mortonCodes[];
};

layout(std430, binding = 9) /*buffer*/ uniform BVHIndices
{
    uint indices[];
};

layout(std140, binding = 10) /*buffer*/ uniform BVHNodes
{
    BVHNode nodes[];
};

struct BVHL1Primitive
{
    int index;
    bool isNode;
};
layout(std430, binding = 11) /*buffer*/ uniform BVHL1Primitives
{
    BVHL1Primitive l1Primitives[];
};

/*shared*/ vec3 localMin[256];
/*shared*/ vec3 localMax[256];

void computeBounds(vec3 value)
{
    uint lid = gl_LocalInvocationID.x;
    uint groupSize = gl_WorkGroupSize.x;

    localMin[lid] = value;
    localMax[lid] = value;

    barrier();

    for (uint s = groupSize / 2; s > 0; s >>= 1)
    {
        if (lid < s)
        {
            localMin[lid] = min(localMin[lid], localMin[lid + s]);
            localMax[lid] = max(localMax[lid], localMax[lid + s]);
        }
        barrier();
    }
    // barrier();

    if (lid == 0) {
        atomicMin(globalMinInt.x, floatToOrderedInt(localMin[0].x));
        atomicMin(globalMinInt.y, floatToOrderedInt(localMin[0].y));
        atomicMin(globalMinInt.z, floatToOrderedInt(localMin[0].z));

        atomicMax(globalMaxInt.x, floatToOrderedInt(localMax[0].x));
        atomicMax(globalMaxInt.y, floatToOrderedInt(localMax[0].y));
        atomicMax(globalMaxInt.z, floatToOrderedInt(localMax[0].z));
    }
}

uint expandBits(uint x)
{
    x = (x | x << 16) & 0x030000FF;
    x = (x | x << 8) & 0x0300F00F;
    x = (x | x << 4) & 0x030C30C3;
    x = (x | x << 2) & 0x09249249;
    return x;
}

uint computeMortonCode(vec3 point, vec3 minBound, vec3 maxBound)
{
    vec3 normalized = (point - minBound) / (maxBound - minBound);
    ivec3 grid = ivec3(normalized * GRID_RESOLUTION);

    return expandBits(grid.x) | (expandBits(grid.y) << 1) | (expandBits(grid.z) << 2);
}

void generateMortonCode(uint gid)
{
    barrier();
    vec3 boundMin = orderedIntToFloatVec3(globalMinInt);
    vec3 boundMax = orderedIntToFloatVec3(globalMaxInt);

    mortonCodes[gid] = computeMortonCode(centers[gid], boundMin, boundMax);
}

vec3 calcTriangleCenter(Triangle tri)
{
    vec3 p0 = tri.vertices[0].posU.xyz;
    vec3 p1 = tri.vertices[1].posU.xyz;
    vec3 p2 = tri.vertices[2].posU.xyz;
    return (p0 + p1 + p2) * 0.33333333f;
}

uniform int n = -1;
uniform int primOffset = 0;
uniform int pass = -1;
uniform bool isLevel1 = false;

void main()
{
    int gid = int(gl_GlobalInvocationID.x);
    if (gid >= n) return;

    if (pass == 0)
    {
        vec3 center;
        if (!isLevel1)
            center = calcTriangleCenter(triangles[gid + primOffset]);
        else
        {
            BVHL1Primitive prim = l1Primitives[gid];
            if (prim.isNode)
                center = (nodes[prim.index].min.xyz + nodes[prim.index].max.xyz) * 0.5f;
            else
                center = objects[prim.index].pos.xyz;
        }
        computeBounds(center);
        centers[gid] = center;
    }
    else if (pass == 1)
    {
        generateMortonCode(gid);
        indices[gid] = gid + primOffset;
    }
}
