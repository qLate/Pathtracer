#version 460 core
#extension GL_ARB_shading_language_include : enable
#include "common.glsl"

layout(local_size_x = 32) in;

layout(std140, binding = 6) /*buffer*/ uniform BVHNodes
{
    BVHNode nodes[];
};

layout(std430, binding = 7) /*buffer*/ uniform Indices
{
    uint indices[];
};

layout(std430, binding = 8) /*buffer*/ uniform MortonCodes
{
    uint mortonCodes[];
};

uniform int n = -1;
uniform int nodeOffset = 0;
uniform bool isTopLevel = false;

int lcp(uint i, uint j)
{
    if (i < 0 || i >= n || j < 0 || j >= n) return -1;
    return 31 - findMSB(mortonCodes[i] ^ mortonCodes[j]);
}

void buildInnerNodes(int i)
{
    if (i >= n - 1) return;
    if (i == 0) nodes[i + nodeOffset].values.w = -1;

    int dir = int(sign(lcp(i, i + 1) - lcp(i, i - 1)));
    int minPrefix = lcp(i, i - dir);

    int l_max = 128;
    while (lcp(i, i + l_max * dir) > minPrefix)
        l_max *= 4;

    int l = 0;
    for (int step = l_max / 2; step > 0; step /= 2)
    {
        if (lcp(i, i + (l + step) * dir) > minPrefix)
            l += step;
    }
    int j = i + l * dir;

    if (dir == 0)
        while (lcp(i, j) == lcp(i, j + 1))
            j++;

    int split;
    if (mortonCodes[i] == mortonCodes[j])
        split = min(i, j);
    else
    {
        int delta = lcp(i, j);
        int s = 0;
        int t = abs(j - i);
        for (int div = 2; t * 2 / div > 0; div *= 2)
        {
            int t_ = int(ceil(t / float(div)));
            if (lcp(i, i + (s + t_) * dir) > delta)
                s += t_;
        }
        split = i + s * dir + min(dir, 0);
    }

    int left = min(i, j) == split ? split + (n - 1) : split;
    int right = max(i, j) == split + 1 ? split + 1 + (n - 1) : split + 1;

    nodes[i + nodeOffset].values.xy = ivec2(left + nodeOffset, right + nodeOffset);
    nodes[left + nodeOffset].values.w = i + nodeOffset;
    nodes[right + nodeOffset].values.w = i + nodeOffset;
}

void localToGlobalBox(vec3 localMin, vec3 localMax, Object obj, out vec3 globalMin, out vec3 globalMax)
{
    vec3 corners[8];
    corners[0] = localToGlobal(vec3(localMin.x, localMin.y, localMin.z), obj);
    corners[1] = localToGlobal(vec3(localMax.x, localMin.y, localMin.z), obj);
    corners[2] = localToGlobal(vec3(localMin.x, localMax.y, localMin.z), obj);
    corners[3] = localToGlobal(vec3(localMax.x, localMax.y, localMin.z), obj);
    corners[4] = localToGlobal(vec3(localMin.x, localMin.y, localMax.z), obj);
    corners[5] = localToGlobal(vec3(localMax.x, localMin.y, localMax.z), obj);
    corners[6] = localToGlobal(vec3(localMin.x, localMax.y, localMax.z), obj);
    corners[7] = localToGlobal(vec3(localMax.x, localMax.y, localMax.z), obj);

    globalMin = corners[0];
    globalMax = corners[0];
    for (int i = 1; i < 8; ++i)
    {
        globalMin = min(globalMin, corners[i]);
        globalMax = max(globalMax, corners[i]);
    }
}

void calcBox(int ind, out vec3 minBound, out vec3 maxBound)
{
    if (isTopLevel)
    {
        Object obj = objects[ind];
        if (obj.objType == OBJ_TYPE_MESH)
        {
            if (obj.properties.z != -1)
            {
                BVHNode rootNode = nodes[int(obj.properties.z)];
                vec3 localMin = rootNode.min.xyz;
                vec3 localMax = rootNode.max.xyz;

                vec3 globalMin, globalMax;
                localToGlobalBox(localMin, localMax, obj, globalMin, globalMax);

                minBound = globalMin - vec3(0.0001);
                maxBound = globalMax + vec3(0.0001);
            }
            else
            {
                minBound = vec3(FLT_MAX);
                maxBound = vec3(FLT_MIN);

                for (int j = int(obj.properties.x); j < obj.properties.x + obj.properties.y; j++)
                {
                    Triangle tri = triangles[j];
                    vec3 p0 = localToGlobal(tri.vertices[0].posU.xyz, obj);
                    vec3 p1 = localToGlobal(tri.vertices[1].posU.xyz, obj);
                    vec3 p2 = localToGlobal(tri.vertices[2].posU.xyz, obj);

                    minBound = min(minBound, min(min(p0, p1), p2) - vec3(0.0001));
                    maxBound = max(maxBound, max(max(p0, p1), p2) + vec3(0.0001));
                }
            }
        }
        else if (obj.objType == OBJ_TYPE_SPHERE)
        {
            vec3 center = obj.pos.xyz;
            float radius = obj.properties.x * getTransformScale(obj.transform).x;

            minBound = center - vec3(radius);
            maxBound = center + vec3(radius);
        }
    }
    else
    {
        Triangle tri = triangles[ind];
        vec3 p0 = tri.vertices[0].posU.xyz;
        vec3 p1 = tri.vertices[1].posU.xyz;
        vec3 p2 = tri.vertices[2].posU.xyz;

        minBound = min(min(p0, p1), p2) - vec3(0.0001);
        maxBound = max(max(p0, p1), p2) + vec3(0.0001);
    }
}

void setLeaf(int i)
{
    int origInd = int(indices[i - (n - 1) - nodeOffset]);
    calcBox(origInd, nodes[i].min.xyz, nodes[i].max.xyz);
    nodes[i].min.w = origInd;
    nodes[i].values.z = 1;
    nodes[i].links.x = nodes[i].links.y;
}

void buildLinksAndLeafs(int i)
{
    if (i >= n - 1)
    {
        if (n == 1 && i == 0)
            setLeaf(i + nodeOffset);
        return;
    }

    int left = int(nodes[i + nodeOffset].values.x);
    int right = int(nodes[i + nodeOffset].values.y);
    int parent = int(nodes[i + nodeOffset].values.w);

    nodes[i + nodeOffset].links.x = left;
    nodes[left].links.y = right;

    if (parent != -1)
    {
        int curr = right;
        do {
            curr = int(nodes[curr].values.w);
            if (int(nodes[curr].values.w) == -1)
            {
                nodes[right].links.y = -1;
                break;
            }
            nodes[right].links.y = nodes[int(nodes[curr].values.w)].values.y;
        }
        while (int(nodes[right].links.y) == curr);
    }

    if (left >= n - 1 + nodeOffset) setLeaf(left);
    if (right >= n - 1 + nodeOffset) setLeaf(right);
}

void calcBoxes(int i)
{
    if (i >= n) return;

    int curr = nodes[i + n - 1 + nodeOffset].values.w;
    while (curr != -1)
    {
        if (atomicAdd(nodes[curr].links.z, 1) == 0) return;

        BVHNode node = nodes[curr];
        node.min.xyz = min(nodes[node.values.x].min.xyz, nodes[node.values.y].min.xyz);
        node.max.xyz = max(nodes[node.values.x].max.xyz, nodes[node.values.y].max.xyz);
        nodes[curr] = node;

        curr = nodes[curr].values.w;
    }
}

uniform int pass = -1;

void main()
{
    int gid = int(gl_GlobalInvocationID.x);
    if (pass == 0)
    {
        if (gid >= 2 * n - 1) return;
        nodes[gid + nodeOffset].min.w = -1;
        nodes[gid + nodeOffset].max.w = -1;
        nodes[gid + nodeOffset].links = ivec4(-1, -1, 0, 0);
    }
    else if (pass == 1)
        buildInnerNodes(gid);
    else if (pass == 2)
        buildLinksAndLeafs(gid);
    else if (pass == 3)
        calcBoxes(gid);
}
