#version 460 core
layout(local_size_x = 32) in;
/// #include "default/_shaderBase.glsl"

layout(std140, binding = 6) /*buffer*/ uniform BVHNodes
{
    BVHNode nodes[];
};

layout(std430, binding = 7) /*buffer*/ uniform BVHTriIndices
{
    uint triIndices[];
};

layout(std430, binding = 8) /*buffer*/ uniform MortonCodes
{
    uint mortonCodes[];
};

uniform int n = -1;

int lcp(uint i, uint j)
{
    if (i < 0 || i >= n || j < 0 || j >= n) return -1;
    return 31 - findMSB(mortonCodes[i] ^ mortonCodes[j]);
}

void buildInnerNodes(int i)
{
    if (i >= n - 1) return;
    if (i == 0) nodes[i].values.w = -1;

    int dir = int(sign(lcp(i, i + 1) - lcp(i, i - 1)));
    int minPrefix = lcp(i, i - dir);

    int l_max = 128;
    while (lcp(i, i + l_max * dir) > minPrefix)
        l_max *= 4;

    int l = 0;
    for (int step = l_max / 2; step > 0; step /= 2) {
        if (lcp(i, i + (l + step) * dir) > minPrefix)
            l += step;
    }
    int j = i + l * dir;

    // Handle duplicate codes
    if (dir == 0)
        while (lcp(i, j) == lcp(i, j + 1))
            j++;

    int split;
    if (mortonCodes[i] == mortonCodes[j])
        split = min(i, j);
    else {
        int delta = lcp(i, j);
        int s = 0;
        int t = abs(j - i);
        for (int div = 2; t * 2 / div > 0; div *= 2) {
            int t_ = int(ceil(t / float(div)));
            if (lcp(i, i + (s + t_) * dir) > delta)
                s += t_;
        }
        split = i + s * dir + min(dir, 0);
    }

    int left = min(i, j) == split ? split + (n - 1) : split;
    int right = max(i, j) == split + 1 ? split + 1 + (n - 1) : split + 1;

    nodes[i].values.xy = ivec2(left, right);
    nodes[left].values.w = i;
    nodes[right].values.w = i;
}

void setLeaf(int i)
{
    calcTriangleBox(triangles[triIndices[i - (n - 1)]], nodes[i].min.xyz, nodes[i].max.xyz);
    nodes[i].min.w = i - (n - 1);
    nodes[i].max.w = 1;
    nodes[i].values.z = 1;
    nodes[i].links.x = nodes[i].links.y;
}
void buildLinksAndLeafs(int i)
{
    if (i >= n - 1) return;

    int left = int(nodes[i].values.x);
    int right = int(nodes[i].values.y);
    int parent = int(nodes[i].values.w);

    nodes[i].links.x = left;
    nodes[left].links.y = right;

    if (parent != -1) {
        int curr = right;
        do {
            curr = int(nodes[curr].values.w);
            if (int(nodes[curr].values.w) == -1)
            {
                nodes[right].links.y = -1;
                break;
            }
            nodes[right].links.y = nodes[int(nodes[curr].values.w)].values.y;
        }
        while (int(nodes[right].links.y) == curr);
    }

    if (left >= n - 1) setLeaf(left);
    if (right >= n - 1) setLeaf(right);
}

void calcBoxes(int i)
{
    if (i >= n) return;

    int curr = nodes[i + n - 1].values.w;
    while (curr != -1)
    {
        if (atomicAdd(nodes[curr].links.z, 1) == 0) return;

        BVHNode node = nodes[curr];
        node.min.xyz = min(nodes[node.values.x].min.xyz, nodes[node.values.y].min.xyz);
        node.max.xyz = max(nodes[node.values.x].max.xyz, nodes[node.values.y].max.xyz);
        nodes[curr] = node;

        curr = nodes[curr].values.w;
    }
}

uniform int pass = -1;
void main()
{
    int gid = int(gl_GlobalInvocationID.x);
    if (pass == 0)
    {
        if (gid >= n) return;
        nodes[gid].links = ivec4(-1, -1, 0, 0);
    }
    else if (pass == 1)
        buildInnerNodes(gid);
    else if (pass == 2)
        buildLinksAndLeafs(gid);
    else if (pass == 3) {
        calcBoxes(gid);
    }
}
