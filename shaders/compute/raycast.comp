#version 460 core
#extension GL_ARB_shading_language_include : enable
#include "common.glsl"

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(std140, binding = 6) /*buffer*/ uniform BVHNodes
{
    BVHNode nodes[];
};

layout(std430, binding = 7) /*buffer*/ uniform BVHTriIndices
{
    uint triIndices[];
};

#include "intersection.glsl"

uniform vec3 rayPos;
uniform vec3 rayDir;
uniform float rayMaxDis;
uniform bool doIntersectLights = false;

struct RaycastHit
{
    vec3 pos;
    vec3 normal;
    vec2 uv;
    int objIndex;
    int triIndex;
    bool hitLight;
};

layout(std140, binding = 20) /*buffer*/ uniform SSBO {
    RaycastHit hit;
};

bool intersectLights(inout Ray ray, inout int hitObjIndex) {
    bool hit = false;
    for (int i = 0; i < lightCount; i++)
    {
        if (intersectLight(ray, lights[i], 1.0f)) {
            hit = true;
            hitObjIndex = i;
        }
    }
    return hit;
}

void main()
{
    Ray ray = Ray(rayPos, rayDir, rayMaxDis, RAY_DEFAULT_ARGS_WO_DIST);

    int hitTriIndex = -1, hitObjIndex = -1;
    intersectWorld(ray, hitTriIndex, hitObjIndex);

    bool hitLight = false;
    if (doIntersectLights) {
        if (intersectLights(ray, hitObjIndex))
            hitLight = true;
    }

    hit = RaycastHit(ray.interPoint, ray.surfaceNormal, ray.uvPos, hitObjIndex, hitTriIndex, hitLight);
}
